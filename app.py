import streamlit as st
import openai
import os
from dotenv import load_dotenv

load_dotenv()

# C·∫•u h√¨nh API
openai.api_key = st.secrets["OPENROUTER_API_KEY"]
openai.api_base = "https://openrouter.ai/api/v1"

st.set_page_config(page_title="Tr·ª£ l√Ω AI", layout="centered")

# Load CSS custom
with open("static/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Header
st.markdown("<h1 class='title'>üß† Anh L·∫≠p Tr√¨nh - Tr·ª£ L√Ω AI</h1>", unsafe_allow_html=True)

# L∆∞u l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "ü§ñ Ch√†o s·∫øp! T√¥i l√† Tr√¨nh, tr·ª£ l√Ω AI c·ªßa b·∫°n. H√£y b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán nh√©!"}
    ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠
chat_html = '<div class="chat-box">'
for m in st.session_state.messages:
    role, content = m["role"], m["content"]
    if role == "user":
        chat_html += f'<div class="message user">üë§ B·∫°n: {content}</div>'
    elif role == "assistant":
        chat_html += f'<div class="message assistant">ü§ñ: {content}</div>'
    else:
        chat_html += f'<div class="message system">{content}</div>'
chat_html += '</div>'
st.markdown(chat_html, unsafe_allow_html=True)

# Form v·ªõi input v√† n√∫t g·ª≠i trong c√πng m·ªôt khung
with st.form("chat_form", clear_on_submit=True):
    st.markdown("""
    <div class="input-container">
        <input name="chat_input" placeholder="Nh·∫≠p n·ªôi dung..." class="input-text" />
        <button class="send-btn" type="submit">üì®</button>
    </div>
    """, unsafe_allow_html=True)
    
    submitted = st.form_submit_button(label="Hidden G·ª≠i")  # d√πng ƒë·ªÉ trigger form

    # M·∫πo l·∫•y gi√° tr·ªã input (d√πng workaround JS/script n√¢ng cao n·∫øu c·∫ßn)
    user_input = st.query_params.get("chat_input", "")

# X·ª≠ l√Ω
if submitted and user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.spinner("ƒê·ª£i Tr√¨nh tr·∫£ l·ªùi..."):
        try:
            response = openai.ChatCompletion.create(
                model="openai/gpt-3.5-turbo",
                messages=st.session_state.messages,
                max_tokens=150
            )
            reply = response["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": reply})
        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
