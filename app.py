import streamlit as st
import openai
import os
from dotenv import load_dotenv

load_dotenv()

# Config
openai.api_key = os.getenv("OPENROUTER_API_KEY")

if openai.api_key is None:
    raise ValueError("Kh√¥ng th·ªÉ t√¨m th·∫•y API Key trong .env!")
# Set page config
st.set_page_config(page_title="Tr·ª£ l√Ω AI", layout="centered")

# Load CSS
with open("static/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


# Header
st.markdown("<h1 class='title'>üß† Anh L·∫≠p Tr√¨nh - Tr·ª£ L√Ω AI</h1>", unsafe_allow_html=True)

# Init message history
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "ü§ñ Ch√†o s·∫øp! T√¥i l√† Tr√¨nh, tr·ª£ l√Ω AI c·ªßa b·∫°n. H√£y b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán nh√©!"}
    ]

# Render chat
chat_html = '<div class="chat-box">'
for m in st.session_state.messages:
    role = m["role"]
    content = m["content"]
    if role == "user":
        chat_html += f'<div class="message user">üë§ B·∫°n: {content}</div>'
    elif role == "assistant":
        chat_html += f'<div class="message assistant">ü§ñ: {content}</div>'
    else:
        chat_html += f'<div class="message system">{content}</div>'
chat_html += '</div>'
st.markdown(chat_html, unsafe_allow_html=True)

# Input box
user_input = st.text_input("S·∫øp nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?", placeholder="S·∫øp nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?", label_visibility="collapsed")

# Process input
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.spinner("ƒê·ª£i Trinh tr·∫£ l·ªùi..."):
        try:
            response = openai.completions.create(
                model="gpt-3.5-turbo",
                # messages=[m for m in st.session_state.messages if m["role"] != "system"]
                prompt="B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh. Ch√†o b·∫°n!",  # Tham s·ªë prompt
                max_tokens=150  # S·ªë l∆∞·ª£ng token t·ªëi ƒëa (c√≥ th·ªÉ th√™m c√°c tham s·ªë kh√°c n·∫øu c·∫ßn)
            )
            reply = response["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": reply})
            st.experimental_rerun()
except openai.error.AuthenticationError as e:
    st.error(f"L·ªói x√°c th·ª±c API: {e}")
except openai.error.OpenAIError as e:
    st.error(f"L·ªói OpenAI: {e}")
except Exception as e:
    st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
