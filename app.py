import streamlit as st
import openai
import os
from dotenv import load_dotenv

load_dotenv()

# C·∫•u h√¨nh API t·ª´ secrets
openai.api_key = st.secrets["OPENROUTER_API_KEY"]
openai.api_base = "https://openrouter.ai/api/v1"  # B·∫Øt bu·ªôc cho OpenRouter

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Tr·ª£ l√Ω AI", layout="centered")

# Load CSS n·∫øu c√≥
try:
    with open("static/style.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
except FileNotFoundError:
    pass

# Header
st.markdown("<h1 class='title'>üß† Anh L·∫≠p Tr√¨nh - Tr·ª£ L√Ω AI</h1>", unsafe_allow_html=True)

# Kh·ªüi t·∫°o l·ªãch s·ª≠ tin nh·∫Øn
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "ü§ñ Ch√†o s·∫øp! T√¥i l√† Tr√¨nh, tr·ª£ l√Ω AI c·ªßa b·∫°n. H√£y b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán nh√©!"}
    ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
chat_html = '<div class="chat-box">'
for m in st.session_state.messages:
    role = m["role"]
    content = m["content"]
    if role == "user":
        chat_html += f'<div class="message user">üë§ B·∫°n: {content}</div>'
    elif role == "assistant":
        chat_html += f'<div class="message assistant">ü§ñ: {content}</div>'
    else:
        chat_html += f'<div class="message system">{content}</div>'
chat_html += '</div>'
st.markdown(chat_html, unsafe_allow_html=True)

# Input box
user_input = st.text_input("S·∫øp nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?", placeholder="Nh·∫≠p n·ªôi dung...", label_visibility="collapsed")

# X·ª≠ l√Ω ƒë·∫ßu v√†o
if user_input:
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o session_state
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.spinner("ƒê·ª£i Tr√¨nh tr·∫£ l·ªùi..."):
        try:
            # G·ª≠i to√†n b·ªô l·ªãch s·ª≠ tin nh·∫Øn v√†o API (bao g·ªìm c·∫£ tin nh·∫Øn ng∆∞·ªùi d√πng)
            response = openai.ChatCompletion.create(
                model="openai/gpt-3.5-turbo",  # Ghi ƒë√∫ng format OpenRouter
                messages=st.session_state.messages,  # G·ª≠i to√†n b·ªô l·ªãch s·ª≠ h·ªôi tho·∫°i
                max_tokens=150  # ƒêi·ªÅu ch·ªânh s·ªë token n·∫øu c·∫ßn
            )
            # L·∫•y ph·∫£n h·ªìi c·ªßa AI
            reply = response["choices"][0]["message"]["content"]
            # Ch·ªâ th√™m ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠ chat
            st.session_state.messages.append({"role": "assistant", "content": reply})
            # L√†m m·ªõi trang ƒë·ªÉ c·∫≠p nh·∫≠t h·ªôi tho·∫°i
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
