import streamlit as st
import openai
import os
from dotenv import load_dotenv

load_dotenv()

# C·∫•u h√¨nh API
openai.api_key = st.secrets["OPENROUTER_API_KEY"]
openai.api_base = "https://openrouter.ai/api/v1"

st.set_page_config(page_title="Tr·ª£ l√Ω AI", layout="centered")

# Load CSS custom
with open("static/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Header
st.markdown("<h1 class='title'>üß† Anh L·∫≠p Tr√¨nh - Tr·ª£ L√Ω AI</h1>", unsafe_allow_html=True)

# L∆∞u l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "ü§ñ Ch√†o s·∫øp! T√¥i l√† Tr√¨nh, tr·ª£ l√Ω AI c·ªßa b·∫°n. H√£y b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán nh√©!"}
    ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠
chat_html = '<div class="chat-box">'
for m in st.session_state.messages:
    role, content = m["role"], m["content"]
    if role == "user":
        chat_html += f'<div class="message user">üë§ B·∫°n: {content}</div>'
    elif role == "assistant":
        chat_html += f'<div class="message assistant">ü§ñ: {content}</div>'
    else:
        chat_html += f'<div class="message system">{content}</div>'
chat_html += '</div>'
st.markdown(chat_html, unsafe_allow_html=True)

# Kh·ªüi t·∫°o bi·∫øn t·∫°m n·∫øu ch∆∞a c√≥
if "last_input" not in st.session_state:
    st.session_state.last_input = ""
if "temp_input" not in st.session_state:
    st.session_state.temp_input = ""

# √î nh·∫≠p li·ªáu
user_input = st.text_input("S·∫øp nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?",
                           placeholder="Nh·∫≠p n·ªôi dung...",
                           label_visibility="collapsed",
                           key="temp_input")

# N·∫øu c√≥ input m·ªõi v√† kh√°c v·ªõi l·∫ßn tr∆∞·ªõc
if user_input and user_input != st.session_state.last_input:
    st.session_state.messages.append({"role": "user", "content": user_input})

    with st.spinner("ƒê·ª£i Tr√¨nh tr·∫£ l·ªùi..."):
        try:
            response = openai.ChatCompletion.create(
                model="openai/gpt-3.5-turbo",
                messages=st.session_state.messages,
                max_tokens=150
            )
            reply = response["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": reply})

            # C·∫≠p nh·∫≠t input cu·ªëi c√πng ƒë·ªÉ tr√°nh g·ª≠i l·∫°i
            st.session_state.last_input = user_input

            # Reset input b·∫±ng c√°ch g√°n r·ªóng key temp_input r·ªìi rerun
            st.session_state.temp_input = ""
            st.experimental_rerun()

        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")





